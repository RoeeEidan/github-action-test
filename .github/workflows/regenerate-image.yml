name: Regenerate Image Workflow

on:
  issue_comment:
    types:
      - created

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate-image:
    if: startsWith(github.event.comment.body, 'regenerate image')
    runs-on: ubuntu-latest

    steps:

      - name: Comment Action Run Link on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ github.event.issue.number }};
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `⚙️ Re-generating the image in [this github action run](${runUrl}), should be ready in about 45s.`
            });

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get PR details via GitHub API
        id: pr_details
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Content Type, Handle, and Ensure Valid Branch
        run: |
          BRANCH_NAME="${{ fromJson(steps.pr_details.outputs.data).head.ref }}"
          echo "Branch name detected: $BRANCH_NAME"

          if [[ -z "$BRANCH_NAME" ]]; then
            echo "Error: BRANCH_NAME is empty. Exiting."
            exit 1
          fi

          git fetch origin "$BRANCH_NAME" || {
            echo "Error: Branch $BRANCH_NAME not found. Exiting."
            exit 1
          }
          git checkout "$BRANCH_NAME"

          CONTENT_TYPE=$(echo "$BRANCH_NAME" | awk -F'/' '{print $3}')
          CONTENT_HANDLE=$(echo "$BRANCH_NAME" | awk -F'/' '{print $4}')

          echo "CONTENT_TYPE=$CONTENT_TYPE" >> $GITHUB_ENV
          echo "CONTENT_HANDLE=$CONTENT_HANDLE" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Run Regenerate Image Script
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Running yarn regenerateImage with content type: $CONTENT_TYPE and handle: $CONTENT_HANDLE"
          RESULT=$(yarn regenerateImage "$CONTENT_TYPE" "$CONTENT_HANDLE")
          echo "$RESULT"
          IMAGE=$(echo "$RESULT" | grep 'IMAGE: ' | cut -d' ' -f2)
          echo "CONTENT_IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Commit Changes with PAT Token Push
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Regenerate image for $CONTENT_TYPE/$CONTENT_HANDLE"
            git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git "$CURRENT_BRANCH"
          else
            echo "No changes to commit."
          fi

      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ github.event.issue.number }};
            const contentType = process.env.CONTENT_TYPE;
            const contentHandle = process.env.CONTENT_HANDLE;
            const image = process.env.CONTENT_IMAGE || 'N/A';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ [Image regenerated](${image}) for \`${contentType}\` with handle \`${contentHandle}\`.`
            });